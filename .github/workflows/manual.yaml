name: How to manually trigger a workflow

# This describes the event that will trigger the workflow
on: 
    workflow_dispatch:
      inputs:
        username:
          description: 'what is your github username?'
          required: true
        reason:
          description: 'Why are you running this workflow manually?'
          required: false
          default: ""

# This is the workflow/jobs that will be triggered by the events above
jobs:
  tests_manual_workflow:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os}}
    env:
      token: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      issues: write
      actions: write
    steps:
    - run: |
        echo "User ${{ github.event.inputs.username }} ran a workflow manually."
        echo "Because ${{ github.event.inputs.reason }}."
        echo "The workflow was triggered by ${{ github.event.inputs.username}}"

    - name: 'Check OS'
      run: |
          echo "Running on ${{ matrix.os }}"
          echo "The current runner is ${{ runner.os }}"
          
    - run: |
        env
        echo ${token}
    - name: run-ls
      run: |
          pwd
          ls
    - name: checkout
      uses: actions/checkout@v4
      with: 
          token: ${{ env.token }}
    - name: 'check-directory'
      run: |
          pwd
          ls
    - name: Get-Event-Payload
      run: |
          echo "The event payload is:"
          echo "${{ toJson(github.event) }}"
    - name: 'Print-All-Github-Contexts'
      run: |
          echo "The github context is:"
          echo "${{ toJson(github) }}"
    
    - name: Build with logs
      run: |
          mkdir ${{ github.workspace }}/build_logs
          echo "Logs from building" > ${{ github.workspace }}/build_logs/build.logs
  
    - name: Upload logs on fail
      id: upload_logs
      #if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: build_logs
        path: ${{ github.workspace }}/build_logs
    
    - name: 'Upload-Artifact'
      #if: steps.upload_logs.outcome == 'success'
      if: ${{ always() }}
      run: |
        echo "The upload_logs step was successful, proceeding to upload the artifact."
    - name: Download build logs
      id: download_logs
      #if: steps.upload_logs.outcome == 'success'
      if: ${{ always() }}
      uses: actions/download-artifact@v4
      with:
        name: 'build_logs'
        path: ${{ github.workspace }}/build_logs
     
    - name: 'Print-Downloaded-Logs'
      if: ${{ always() }}
      run: |
        echo "The downloaded logs are:"
        cat ${{ github.workspace }}/build_logs/build.logs
        ls -l ${{ github.workspace }}/build_logs

    - name: 'Release-tag'
      if: ${{ always() }}
      run: |
        echo "tag=$(echo $GITHUB_SHA | cut -c1-3)" >> $GITHUB_ENV
      

    - name: 'Release-Artifact'
      if: ${{ always() }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.tag }}
        draft: false
        prerelease: false
        files: ${{ github.workspace }}/build_logs/build.logs
  
    - name: 'Summary'
      if: ${{ always() }}
      run: |
        echo "## Summary of the workflow run" >> $GITHUB_STEP_SUMMARY
        echo "User: ${{ github.event.inputs.username }}" >> $GITHUB_STEP_SUMMARY
        echo "Reason: ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
        echo "OS: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "Logs are available in the artifact." >> $GITHUB_STEP_SUMMARY

  generate:
        outputs:
          RANDOM_PASSWORD: ${{ env.RANDOM_PASSWORD }}
        runs-on: ubuntu-latest
        needs: tests_manual_workflow
        steps:
          - run: env | sort
          - run: echo "RANDOM_PASSWORD=$(LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 12)" >> "$GITHUB_ENV"
          - run: echo "$RANDOM_PASSWORD / ${{ env.RANDOM_PASSWORD }}"
          - run: env | sort
          # - run: mysql ... -p $RANDOM_PASSWORD
  testing:
        runs-on: ubuntu-latest
        needs: generate
        container:
          image: mysql:8.4
        services:
          mysqlserver:
            image: mysql:8.4
            env:
              MYSQL_ROOT_PASSWORD: ${{ needs.generate.outputs.RANDOM_PASSWORD }}
              MYSQL_DATABASE: foothebar
            options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        steps:
          - run: echo "${{ needs.generate.outputs.RANDOM_PASSWORD }}"
          - run: mysql --version
          - run: mysql -h mysqlserver -u root -p${{ needs.generate.outputs.RANDOM_PASSWORD }} -e "SHOW DATABASES;"
          - run: echo "job.services= ${{ toJson(job.services)}}"
          - run: echo "job.container= ${{ toJson(job.container)}}"
